import asyncio
import random

import disnake
from disnake.ext import commands
from databases import user_base

from random_unicode_emoji import random_emoji

embed_users = {}

transfer_facts_list = [
    "> **–ö–∞–∂–¥–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞ —Å –ø–æ–º–æ—â—å—é —Ö–µ—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.** \n",
    "> **–•–µ—à —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ - –∫–ª—é—á, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø –∫ –ø–µ—Ä–µ–¥–∞—á–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, "
    "–±–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Å–æ–≤–µ—Ä—à–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.** \n",
    "> **–ö–∞–∂–¥—ã–π —Ö–µ—à —É–Ω–∏–∫–∞–ª–µ–Ω. –û–Ω–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ –±–∞–∑—É, –¥–æ—Å—Ç—É–ø –∫ –∫–æ—Ç–æ—Ä–æ–π –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ"
    "—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.**",

    "> **–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä,"
    "–∞ —Ç–∞–∫ –∂–µ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É.**",

    "> **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, "
    "–µ—Å–ª–∏ –Ω–∞ —ç—Ç–æ –µ—Å—Ç—å –≤–µ—Å–æ–º–∞—è –ø—Ä–∏—á–∏–Ω–∞.**",

    "> **–° –ª—é–±–æ–≤—å—é, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ Mithic Vanilla ‚ù§Ô∏è‚Äçü©π (—Ç—ã –Ω–∞—à—ë–ª –ø–∞—Å—Ö–∞–ª–∫—É)**",

    "> **–£ —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å—Ç—å —Å–≤–æ–π —Ç—Ä–µ–π–ª–µ—Ä, –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ!**",

    "> **–ù–∞ —Å—Ç–∞–¥–∏–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏, —Å–µ—Ä–≤–µ—Ä —à–∏—Ñ—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —ç–º–æ–¥–∑–∏**"
]


class CardSelectDropdown(disnake.ui.StringSelect):
    def __init__(self, db: user_base.Database, user_id: int):
        # Define the options that will be displayed inside the dropdown.
        # You may not have more than 25 options.
        # There is a `value` keyword that is being omitted, which is useful if
        # you wish to display a label to the user, but handle a different value
        # here within the code, like an index number or database id.

        cards = [db.get_card_data(user_id), db.get_card_data(user_id, "anonymous")]
        counter = 0
        cards_data = {}
        for card in cards:
            if type(card) != user_base.SomethingWentWrongException:
                counter += 1
                card_data = {"label": f"–ö–∞—Ä—Ç–∞ {counter}"}
                if card[4] == "debit":
                    card_type = "–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞"
                    emoji = "üí≥"
                else:
                    card_type = "–ê–Ω–æ–Ω–∏–º–Ω–∞—è –∫–∞—Ä—Ç–∞"
                    emoji = "üîí"
                card_data["description"] = card_type
                card_data["emoji"] = emoji
                cards_data[card[4]] = card_data

        options = []
        for key, value in cards_data.items():
            options.append(
                disnake.SelectOption(
                    label=value["label"],
                    description=value["description"],
                    emoji=value["emoji"]
                )
            )

        # We will include a placeholder that will be shown until an option has been selected.
        # The min and max values indicate the minimum and maximum number of options to be selected -
        # in this example we will only allow one option to be selected.
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É",
            min_values=1,
            max_values=1,
            options=options,
        )

    # This callback is called each time a user has selected an option
    async def callback(self, inter: disnake.MessageInteraction):
        db = user_base.Database(inter.user.guild, inter.bot)
        card = self.values[0]

        data_to_send = inter.message.embeds[0]

        sender_field = data_to_send.fields[0]
        sender_id = sender_field.value.replace("<", "")
        sender_id = sender_id.replace(">", "")
        sender_id = sender_id.replace("@", "")
        sender_id = int(sender_id)
        sender_card_data = db.get_card_data(sender_id)

        receiver_field = data_to_send.fields[1]
        receiver_id = receiver_field.value.replace("<", "")
        receiver_id = receiver_id.replace(">", "")
        receiver_id = receiver_id.replace("@", "")
        receiver_id = int(receiver_id)
        receiver_card_data = db.get_card_data(receiver_id)

        bonus_field = data_to_send.fields[2]
        bonus_amount = int(bonus_field.value)

        reason_field = data_to_send.fields[3]
        reason = reason_field.value

        transfer_hash = db.generate_unique_hash(str(inter.message.id))
        if type(db.get_transfer_info(transfer_hash=transfer_hash)) != user_base.SomethingWentWrongException:
            await inter.response.send_message("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å —Ç–∞–∫–∏–º —Ö–µ—à–µ–º —É–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–∞. "
                                              "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é /transfer)", ephemeral=True)
            return
        print(sender_card_data[1], receiver_card_data[1],
                                          sender_id, receiver_id,
                                          reason, bonus_amount, transfer_hash)
        transfer_data = db.transfer_money(sender_card_data[1], receiver_card_data[1],
                                          sender_id, receiver_id,
                                          reason, bonus_amount, transfer_hash)
        if type(transfer_data) == user_base.SomethingWentWrongException:
            await inter.response.send_message("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.", ephemeral=True)
            return
        else:
            description = "**‚åõ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –±–∞–∑–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...**\n\n"
            description += "**–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç:**\n"
            description += random.choice(transfer_facts_list)
            embed = disnake.Embed(
                title="–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏",
                description=description,
                color=disnake.Color.green(),
            )

            await inter.response.send_message("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É", ephemeral=True)

            msg = await inter.channel.send(embed=embed, content=f"<@{sender_id}> <@{receiver_id}>")
            await asyncio.sleep(random.randint(1, 3) / 10)
            await msg.edit(content=f"**–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...** \n ``–ü—É—Ç—å: user_base.py/transfer ("
                                   f"exec arguments: {random_emoji(count=4)}``")
            await asyncio.sleep(random.randint(1, 3) / 10)
            await msg.edit(content="**–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ...** \n ``–ü—É—Ç—å: user_base.py/transfer ("
                                   f"exec arguments: {random_emoji(count=4)}``")
            await asyncio.sleep(random.randint(1, 3) / 10)
            await msg.edit(content="**–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...** \n ``–ü—É—Ç—å: user_base.py/transfer ("
                                   f"exec arguments: {random_emoji(count=4)}``")
            await asyncio.sleep(random.randint(2, 4))

            new_description = "**–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**"
            new_embed = disnake.Embed(
                title="–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞",
                description=new_description,
                color=disnake.Color.green(),
            )

            new_embed.add_field(name="‚è© –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value=f"<@{sender_id}>", inline=False)
            new_embed.add_field(name="‚è© –ü–æ–ª—É—á–∞—Ç–µ–ª—å", value=f"<@{receiver_id}>", inline=False)
            new_embed.add_field(name="üíµ –°—É–º–º–∞", value=f"{bonus_amount}", inline=False)
            new_embed.add_field(name="‚ùî –ü—Ä–∏—á–∏–Ω–∞", value=f"**{reason}**", inline=False)

            await msg.edit(embed=new_embed, content="")


class TransferView(disnake.ui.View):
    def __init__(self, db: user_base.Database, user_id: int):
        # You would pass a new `timeout=` if you wish to alter it, but
        # we will leave it empty for this example so that it uses the default 180s.
        super().__init__()

        # Now let's add the `StringSelect` object we created above to this view
        self.add_item(CardSelectDropdown(db, user_id))


class DBTEST(commands.Cog):
    def __init__(self, bot):
        self.bot = bot

    @commands.slash_command(name="profile",
                            dm_permission=False)
    async def info(self, inter: disnake.ApplicationCommandInteraction):
        global components
        description = "**–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:** \n\n> üí≥ **- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n> " \
                      "ü§ù **- –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤**\n> üõí **- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–µ—Ä–µ–≤–æ–¥–∞–º** ``(–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)``\n\n"
        db = user_base.Database(inter.user.guild, self.bot)

        if type(db.get_card_data(inter.user.id)) != user_base.SomethingWentWrongException:
            components = [
                disnake.ui.Button(label="", style=disnake.ButtonStyle.green, emoji="üí≥", custom_id="user_card_info"),
                disnake.ui.Button(label="", style=disnake.ButtonStyle.green, emoji="ü§ù", custom_id="transfer_open"),
                disnake.ui.Button(label="", style=disnake.ButtonStyle.green, emoji="üõí", custom_id="transfer_info",
                                  disabled=True)
            ]
        else:
            components = [
                disnake.ui.Button(label="", style=disnake.ButtonStyle.green, emoji="üí≥", custom_id="user_card_info"),
                disnake.ui.Button(label="", style=disnake.ButtonStyle.green, emoji="ü§ù", custom_id="transfer_open",
                                  disabled=True),
                disnake.ui.Button(label="", style=disnake.ButtonStyle.green, emoji="üõí", custom_id="transfer_info",
                                  disabled=True)
            ]
            description += ("```–ü—Ä–æ—Å—å–±–∞ –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã - –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–µ–π, "
                            "–Ω—É–∂–Ω–æ –µ—ë –æ—Ç–∫—Ä—ã—Ç—å. \n"
                            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É.```")

        embed = disnake.Embed(
            title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–µ",
            description=description,
            color=disnake.Color.green()
        )

        await inter.response.send_message(embed=embed, components=components, ephemeral=True)

    @commands.slash_command(name="setmoney",
                            dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    async def setmoney(self, inter: disnake.ApplicationCommandInteraction, count: int, user: disnake.Member = None):
        db = user_base.Database(guild=inter.guild, bot=self.bot)
        if user is None:
            user = inter.user

        description = f"**üëç –ë–æ–Ω—É—Å—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.mention}**"
        color = disnake.Color.green()

        embed = disnake.Embed(
            title="–û—Ç–ø—Ä–∞–≤–∫–∞ –±–æ–Ω—É—Å–æ–≤",
            description=description,
            color=color,
        )
        embed.set_author(name="Mithic Vanilla",
                         icon_url="https://cdn.discordapp.com/attachments/1105911982873378816/1222136596174733382/image.png?ex=662f7c66&is=662e2ae6&hm=75c38008d297e0716f21b73a0fd46346a85d417b37f5e10cf6d05caf17f88d04&")

        db.set_money(money=count, user_id=user.id)
        await inter.response.send_message(embed=embed, ephemeral=True)

    @commands.slash_command(name="new_item",
                            dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    async def new_item(self, inter: disnake.ApplicationCommandInteraction, name: str, price: int, role: disnake.Role,
                       command: str):
        db = user_base.Database(guild=inter.guild, bot=self.bot)

        db.new_shop_item(name=name, price=price, role_id=role.id, command=command)

        description = f"**üëç –ü—Ä–µ–¥–º–µ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω**"
        color = disnake.Color.green()

        embed = disnake.Embed(
            title="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –º–∞–≥–∞–∑–∏–Ω",
            description=description,
            color=color,
        )
        embed.set_author(name="Mithic Vanilla",
                         icon_url="https://cdn.discordapp.com/attachments/1105911982873378816/1222136596174733382/image.png?ex=662f7c66&is=662e2ae6&hm=75c38008d297e0716f21b73a0fd46346a85d417b37f5e10cf6d05caf17f88d04&")

        await inter.response.send_message(embed=embed, ephemeral=True)

    @commands.slash_command(name="delete_item",
                            dm_permission=False)
    @commands.default_member_permissions(administrator=True)
    async def delete_item(self, inter: disnake.ApplicationCommandInteraction, name: str, price: int, role: disnake.Role,
                          command: str):
        db = user_base.Database(guild=inter.guild, bot=self.bot)

        response = db.delete_shop_item(name=name)
        if response is None:
            description = f"üëç –ü—Ä–µ–¥–º–µ—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω"
            color = disnake.Color.green()

            embed = disnake.Embed(
                title="–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",
                description=description,
                color=color,
            )

            embed.set_author(name="Mithic Vanilla",
                             icon_url="https://cdn.discordapp.com/attachments/1105911982873378816/1222136596174733382/image.png?ex=662f7c66&is=662e2ae6&hm=75c38008d297e0716f21b73a0fd46346a85d417b37f5e10cf6d05caf17f88d04&")

            await inter.response.send_message(embed=embed, ephemeral=True)
        else:
            description = f"‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."
            color = disnake.Color.red()

            embed = disnake.Embed(
                title="–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞",
                description=description,
                color=color,
            )

            embed.set_author(name="Mithic Vanilla",
                             icon_url="https://cdn.discordapp.com/attachments/1105911982873378816/1222136596174733382"
                                      "/image.png?ex=662f7c66&is=662e2ae6&hm"
                                      "=75c38008d297e0716f21b73a0fd46346a85d417b37f5e10cf6d05caf17f88d04&")

            await inter.response.send_message(embed=embed, ephemeral=True)

    @commands.slash_command(name="shop_items",
                            dm_permission=False)
    async def shop_items(self, inter: disnake.ApplicationCommandInteraction):
        db = user_base.Database(guild=inter.guild, bot=self.bot)

        items = db.get_all_items()

        description = ""
        count = 0
        for item in items:
            count += 1
            description += f"> **{count}. {item[0]} <@&{item[2]}> -** ``{item[1]}``"

        color = disnake.Color.green()

        embed = disnake.Embed(
            title="–ü—Ä–µ–¥–º–µ—Ç—ã",
            description=description,
            color=color,
        )
        embed.set_author(name="Mithic Vanilla",
                         icon_url="https://cdn.discordapp.com/attachments/1105911982873378816/1222136596174733382/image.png?ex=662f7c66&is=662e2ae6&hm=75c38008d297e0716f21b73a0fd46346a85d417b37f5e10cf6d05caf17f88d04&")

        await inter.response.send_message(embed=embed)

    @commands.slash_command(name="buy_item",
                            dm_permission=False)
    async def buy_item(self, inter: disnake.ApplicationCommandInteraction, item_id: int):
        db = user_base.Database(guild=inter.guild, bot=self.bot)

        items = db.get_all_items()

        if len(items) >= item_id:
            item = items[item_id - 1]
            print(item, items)
            price = item[1]
            print(price)
            if price <= db.get_user_money(inter.user.id)[1]:
                item_role = disnake.utils.get(inter.guild.roles, id=item[2])
                has_role = False
                for role in inter.user.roles:
                    if role == item_role:
                        has_role = True
                        break

                if not has_role:
                    db.decrease_money(user_id=inter.user.id, much=item[1])
                    #await db.give_item(inter=inter, user_id=inter.user.id, item=item)
                    await inter.user.add_roles(item_role, reason="–ü–æ–∫—É–ø–∫–∞ —Ä–æ–ª–∏")
                    await inter.response.send_message("–¢–æ–≤–∞—Ä –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç—ë–Ω", ephemeral=True)
                else:
                    await inter.response.send_message("–í—ã —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞–ª–∏ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä —Ä–∞–Ω–µ–µ",
                                                      ephemeral=True)
            else:
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!",
                                                  ephemeral=True)
        else:
            await inter.response.send_message("–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞", ephemeral=True)

    @commands.slash_command(name="transfer",
                            dm_permission=False)
    async def transfer(self, inter: disnake.ApplicationCommandInteraction, user: disnake.Member, amount: int,
                       reason: str = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"):
        db = user_base.Database(guild=inter.guild, bot=self.bot)

        if inter.user != user and not user.bot:
            print(db.get_card_data(inter.user.id))
            print(db.get_card_data(user.id))
            if type(db.get_card_data(inter.user.id)) != user_base.SomethingWentWrongException and type(
                    db.get_card_data(user.id)) != user_base.SomethingWentWrongException:
                if db.get_transfer_access(inter.user.id)[1] == 1 and db.get_transfer_access(user.id)[1] == 1:
                    if db.get_user_money(inter.user.id)[1] >= amount:
                        embed = disnake.Embed(
                            title="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥",
                            description="**–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ. \n–í–æ–∑–≤—Ä–∞—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –±–µ–∑ "
                                        "—É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã!**",
                            color=disnake.Color.green()
                        )
                        embed.add_field(name="‚è© –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å", value=f"{inter.user.mention}", inline=False)
                        embed.add_field(name="‚è© –ü–æ–ª—É—á–∞—Ç–µ–ª—å", value=f"{user.mention}", inline=False)
                        embed.add_field(name="üíµ –°—É–º–º–∞", value=f"{amount}", inline=False)
                        embed.add_field(name="‚ùî –ü—Ä–∏—á–∏–Ω–∞", value=f"**{reason}**", inline=False)

                        view = TransferView(db, inter.user.id)
                        await inter.response.send_message(embed=embed, ephemeral=True, view=view)
                    else:
                        await inter.response.send_message("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü—Ä–∏—á–∏–Ω–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.",
                                                          ephemeral=True)
                else:
                    await inter.response.send_message(
                        "–£ –æ–¥–Ω–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        ephemeral=True)
            else:
                await inter.response.send_message("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", ephemeral=True)
        else:
            await inter.response.send_message(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", ephemeral=True)

    @commands.Cog.listener("on_button_click")
    async def button_listener(self, inter: disnake.MessageInteraction):
        if inter.component.custom_id not in ["user_card_info", "transfer_open", "transfer_info", "open_card"]:
            return

        if inter.message.id in embed_users:
            if (embed_users[inter.message.id] != inter.user.id and inter.component.custom_id != "startcaptcha"
                    or inter.component.custom_id != "sendcaptcha"):
                await inter.response.send_message("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.", ephemeral=True)

        if inter.component.custom_id == "user_card_info":
            db = user_base.Database(guild=inter.guild, bot=self.bot)

            if not type(db.get_card_data(inter.user.id)) == user_base.SomethingWentWrongException:
                embed = disnake.Embed(
                    title="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    color=disnake.Color.green()
                )

                card_data = db.get_card_data(inter.user.id)

                embed.add_field(name="üí≥ –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã", value=str(card_data[1]), inline=False)
                embed.add_field(name="‚åõ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", value=str(card_data[2]), inline=False)
                embed.add_field(name="üîê CVV", value=f"||{str(card_data[3])}||", inline=False)
                embed.add_field(name="üëÅÔ∏è –î–µ—Ä–∂–∞—Ç–µ–ª—å –∫–∞—Ä—Ç—ã", value=f"{inter.user.mention}", inline=False)
                embed.add_field(name="üí∞ –ë–∞–ª–∞–Ω—Å", value=f"``{db.get_user_money(inter.user.id)[1]}``", inline=False)

                await inter.response.send_message(embed=embed, ephemeral=True)
            else:
                if db.get_user_level(inter.user.id)[1] >= 15:
                    embed = disnake.Embed(
                        title="–ö–∞—Ä—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        description="**–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞. –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ** \n"
                                    "\n üí≥ **–ö–∞—Ä—Ç–∞ –¥–∞—ë—Ç –≤–∞–º —ç—Ç–∏ –ø—Ä–µ–π–º—É—â–µ—Å—Ç–≤–∞:**"
                                    "\n> - **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏**"
                                    "\n> - **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ**"
                                    "\n> - **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º –±–æ–Ω—É—Å–æ–≤**",
                        color=disnake.Color.green()
                    )

                    await inter.response.send_message(embed=embed, ephemeral=True, components=[
                        disnake.ui.Button(label="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", style=disnake.ButtonStyle.green, custom_id="open_card")
                    ])
                else:
                    embed = disnake.Embed(
                        title="–ö–∞—Ä—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
                        description="**–£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞. –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º 15 —É—Ä–æ–≤–µ–Ω—å!** \n"
                                    "\n üí≥ **–ö–∞—Ä—Ç–∞ –¥–∞—ë—Ç –≤–∞–º —ç—Ç–∏ –ø—Ä–µ–π–º—É—â–µ—Å—Ç–≤–∞:**"
                                    "\n> - **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏**"
                                    "\n> - **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫—É–ø–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ**"
                                    "\n> - **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ–∫—É–ø–∫–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ –ø–µ—Ä–µ–≤–æ–¥–æ–º –±–æ–Ω—É—Å–æ–≤**",
                        color=disnake.Color.green()
                    )

                    await inter.response.send_message(embed=embed, ephemeral=True, components=[
                        disnake.ui.Button(label="–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É", style=disnake.ButtonStyle.green, custom_id="open_card",
                                          disabled=True)
                    ])
        elif inter.component.custom_id == "open_card":
            db = user_base.Database(guild=inter.guild, bot=self.bot)

            if type(db.get_card_data(inter.user.id)) == user_base.SomethingWentWrongException:
                db.new_card(inter.user.id)
                await inter.response.send_message("–ö–∞—Ä—Ç–∞ –±—ã–ª–∞ –æ—Ç–∫—Ä—ã—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.",
                                                  ephemeral=True)
            else:
                await inter.response.send_message("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –¥–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞!", ephemeral=True)
        elif inter.component.custom_id == "transfer_open":
            db = user_base.Database(guild=inter.guild, bot=self.bot)

            if type(db.get_card_data(inter.user.id)) != user_base.SomethingWentWrongException:
                text = ""

                if db.get_transfer_access(inter.user.id)[1] == 0:
                    db.set_transfer_access(inter.user.id, 1)
                    text = "–ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã"
                else:
                    db.set_transfer_access(inter.user.id)
                    text = "–ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω—ã"

                await inter.response.send_message(content=text, ephemeral=True)
            else:
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç—ã.", ephemeral=True)


def setup(bot: commands.Bot):
    bot.add_cog(DBTEST(bot))
